{"version":3,"sources":["utils/entity-map.ts","utils/entity-names.ts","utils/global-state-provider.ts","components/results/results.tsx","components/search/search.tsx","serviceWorker.ts","index.tsx","components/app/app.tsx"],"names":["entityMap","Map","entitiesJson","entities","entity","set","name","Object","entries","aliases","aliasOf","reasons","get","entityNames","push","keys","entityName","createProvider","search","fuzzyPreparedEntityNames","map","fuzzysort","prepare","FUZZYSORT_OPTIONS","allowTypo","limit","threshold","Results","globalStateProvider","useGlobal","fuzzyResults","React","useMemo","go","className","fuzzyResult","key","target","href","title","Search","setSearch","handleSearchChange","useCallback","e","a","currentTarget","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yqDAQMA,EAAiC,IAAIC,I,uBAE3C,YAAqBC,EAAaC,SAAlC,+CAA4C,CAAC,IAAlCC,EAAiC,QAC1CJ,EAAUK,IAAID,EAAOE,KAAMF,I,kFAG7B,cAA8BG,OAAOC,QAAQN,EAAaO,SAA1D,eAAoE,CAAC,IAAD,wBAAxDH,EAAwD,KAAlDI,EAAkD,KAClEV,EAAUK,IAAIC,EAAM,CAClBI,UACAJ,OACAK,SAAS,UAAAX,EAAUY,IAAIF,UAAd,eAAwBC,UAAW,KAIjCX,ICpBTa,EAAwB,G,uBAE9B,YAAqBX,EAAaC,SAAlC,+CAA4C,CAAC,IAAlCC,EAAiC,QAC1CS,EAAYC,KAAKV,EAAOE,O,kFAG1B,cAAyBC,OAAOQ,KAAKb,EAAaO,SAAlD,eAA4D,CAAvD,IAAMO,EAAU,KACnBH,EAAYC,KAAKE,GAGJH,Q,QCNAI,2BAAsB,CACnCC,OAAQ,KCFJC,G,MAAiDN,EAAYO,KACjE,SAACJ,GAAD,OACEK,IAAUC,QAAQN,OAGhBO,EAAuC,CAC3CC,WAAW,EACXC,MAAO,IACPC,WAAY,KAGC,SAASC,IAAwB,IAAD,EAC5BC,EAAoBC,UAAU,UAAxCX,EADsC,oBAGvCY,EAAkCC,IAAMC,SAAQ,WACpD,OAAOX,IAAUY,GAAGf,EAAQC,EAA0BI,KACrD,CAACL,IAEJ,OACE,yBAAKgB,UAAU,WACb,4BACGJ,EAAaV,KACZ,SAACe,GAAD,OACE,wBAAIC,IAAKD,EAAYE,QACnB,uBACEC,KAAI,kBAAaH,EAAYE,QAC7BE,MAAOJ,EAAYE,QAElBF,EAAYE,c,6BC9Bd,SAASG,IAAuB,IAAD,EAChBZ,EAAoBC,UAAU,UADd,mBACrCX,EADqC,KAC7BuB,EAD6B,KAGtCC,EAAqBX,IAAMY,YAAN,uCACzB,WAAOC,GAAP,SAAAC,EAAA,sEACQJ,EAAUG,EAAEE,cAAcC,OADlC,2CADyB,sDAIzB,CAACN,IAGH,OAAO,2BAAOO,SAAUN,EAAoBK,MAAO7B,I,MCDjC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WACb,OACE,0BAAMrB,UAAU,OACd,0CACA,kBAACM,EAAD,MACA,kBAACb,EAAD,SDHU,MAAS6B,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab797527.chunk.js","sourcesContent":["import entitiesJson from '../entities.json';\n\ninterface Entity {\n  aliasOf?: string;\n  name: string;\n  reasons: string[];\n}\n\nconst entityMap: Map<string, Entity> = new Map();\n\nfor (const entity of entitiesJson.entities) {\n  entityMap.set(entity.name, entity);\n}\n\nfor (const [name, aliasOf] of Object.entries(entitiesJson.aliases)) {\n  entityMap.set(name, {\n    aliasOf,\n    name,\n    reasons: entityMap.get(aliasOf)?.reasons || [],\n  });\n}\n\nexport default entityMap;\n","import entitiesJson from '../entities.json';\n\nconst entityNames: string[] = [];\n\nfor (const entity of entitiesJson.entities) {\n  entityNames.push(entity.name);\n}\n\nfor (const entityName of Object.keys(entitiesJson.aliases)) {\n  entityNames.push(entityName);\n}\n\nexport default entityNames;\n","import { createProvider } from 'reactn';\n\ninterface State {\n  search: string;\n}\n\nexport default createProvider<State>({\n  search: '',\n});\n","import fuzzysort from 'fuzzysort';\nimport React from 'react';\nimport { entityNames, globalStateProvider } from '../../utils';\nimport './results.scss';\n\nconst fuzzyPreparedEntityNames: Fuzzysort.Prepared[] = entityNames.map(\n  (entityName: string): Fuzzysort.Prepared =>\n    fuzzysort.prepare(entityName) as Fuzzysort.Prepared,\n);\n\nconst FUZZYSORT_OPTIONS: Fuzzysort.Options = {\n  allowTypo: true,\n  limit: 100,\n  threshold: -10000,\n};\n\nexport default function Results(): JSX.Element {\n  const [search] = globalStateProvider.useGlobal('search');\n\n  const fuzzyResults: Fuzzysort.Results = React.useMemo((): Fuzzysort.Results => {\n    return fuzzysort.go(search, fuzzyPreparedEntityNames, FUZZYSORT_OPTIONS);\n  }, [search]);\n\n  return (\n    <div className=\"results\">\n      <ul>\n        {fuzzyResults.map(\n          (fuzzyResult: Fuzzysort.Result): JSX.Element => (\n            <li key={fuzzyResult.target}>\n              <a\n                href={`?entity=${fuzzyResult.target}`}\n                title={fuzzyResult.target}\n              >\n                {fuzzyResult.target}\n              </a>\n            </li>\n          ),\n        )}\n      </ul>\n    </div>\n  );\n}\n","import React, { ChangeEvent } from 'react';\nimport { globalStateProvider } from '../../utils';\n\nexport default function Search(): JSX.Element {\n  const [search, setSearch] = globalStateProvider.useGlobal('search');\n\n  const handleSearchChange = React.useCallback(\n    async (e: ChangeEvent<HTMLInputElement>): Promise<void> => {\n      await setSearch(e.currentTarget.value);\n    },\n    [setSearch],\n  );\n\n  return <input onChange={handleSearchChange} value={search} />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Results, Search } from '..';\nimport './app.scss';\n\nexport default function App(): JSX.Element {\n  return (\n    <main className=\"app\">\n      <h1>Peoplecott</h1>\n      <Search />\n      <Results />\n    </main>\n  );\n}\n"],"sourceRoot":""}